; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	D:\Development\Projects\OptimizationTest\main.cxx
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_04IHNIHLJD@?5?$DO?$DO?$DO?$AA@		; `string'
PUBLIC	??_C@_0L@FNFMFEBM@?$DM?$DM?$DM?5AT?5?5?3?5?$AA@	; `string'
PUBLIC	??_C@_0L@BDIDHNLI@?$DM?$DM?$DM?5RAW?5?3?5?$AA@	; `string'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?test@@3PAVVectorOptimizationTest@@A		; test
EXTRN	__imp_?rdstate@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp____std_terminate:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__rand:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__memmove:PROC
EXTRN	@__security_check_cookie@4:PROC
?test@@3PAVVectorOptimizationTest@@A DD 01H DUP (?)	; test
_BSS	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDIDHNLI@?$DM?$DM?$DM?5RAW?5?3?5?$AA@
CONST	SEGMENT
??_C@_0L@BDIDHNLI@?$DM?$DM?$DM?5RAW?5?3?5?$AA@ DB '<<< RAW : ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNFMFEBM@?$DM?$DM?$DM?5AT?5?5?3?5?$AA@
CONST	SEGMENT
??_C@_0L@FNFMFEBM@?$DM?$DM?$DM?5AT?5?5?3?5?$AA@ DB '<<< AT  : ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHNIHLJD@?5?$DO?$DO?$DO?$AA@
CONST	SEGMENT
??_C@_04IHNIHLJD@?5?$DO?$DO?$DO?$AA@ DB ' >>>', 00H	; `string'
CONST	ENDS
PUBLIC	??$_Uninit_move@PAVSomeClass@@PAV1@PAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SomeClass *,SomeClass *,SomeClass *>
PUBLIC	??$_Val_type@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z ; std::_Val_type<SomeClass * *>
PUBLIC	??$_Rechecked@PAPAVSomeClass@@PAPAV1@@std@@YAAAPAPAVSomeClass@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<SomeClass * *,SomeClass * *>
PUBLIC	??$_Uninit_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z ; std::_Uninit_move<SomeClass * *,SomeClass * *,std::_Wrap_alloc<std::allocator<SomeClass *> > >
PUBLIC	??$_Unchecked@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z ; std::_Unchecked<SomeClass * *>
PUBLIC	??$construct@PAVSomeClass@@PAV1@@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z ; std::allocator<SomeClass *>::construct<SomeClass *,SomeClass *>
PUBLIC	??$_Uninitialized_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z ; std::_Uninitialized_move<SomeClass * *,SomeClass * *,std::_Wrap_alloc<std::allocator<SomeClass *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SomeClass *> > >
PUBLIC	??$forward@ABV?$allocator@PAVSomeClass@@@std@@@std@@YAABV?$allocator@PAVSomeClass@@@0@ABV10@@Z ; std::forward<std::allocator<SomeClass *> const &>
PUBLIC	??$construct@PAVSomeClass@@PAV1@@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAXAAV?$allocator@PAVSomeClass@@@1@PAPAVSomeClass@@$$QAPAV3@@Z ; std::allocator_traits<std::allocator<SomeClass *> >::construct<SomeClass *,SomeClass *>
PUBLIC	??$_Addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z ; std::_Addressof<SomeClass *>
PUBLIC	??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<SomeClass * *,SomeClass * *>
PUBLIC	??$_Ptr_cat@PAVSomeClass@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVSomeClass@@0@Z ; std::_Ptr_cat<SomeClass *,SomeClass *>
PUBLIC	??0?$allocator@PAVSomeClass@@@std@@QAE@ABV01@@Z	; std::allocator<SomeClass *>::allocator<SomeClass *>
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::_Wrap_alloc<std::allocator<SomeClass *> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SomeClass *> >::_Vector_val<std::_Simple_types<SomeClass *> >
PUBLIC	??$_Allocate@PAVSomeClass@@@std@@YAPAPAVSomeClass@@IPAPAV1@_N@Z ; std::_Allocate<SomeClass *>
PUBLIC	??$_Deallocate@PAVSomeClass@@@std@@YAXPAPAVSomeClass@@I@Z ; std::_Deallocate<SomeClass *>
PUBLIC	??$_Umove@PAPAVSomeClass@@@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEPAPAVSomeClass@@PAPAV2@00@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Umove<SomeClass * *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SomeClass *> > >
PUBLIC	??$?0ABV?$allocator@PAVSomeClass@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVSomeClass@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1><std::allocator<SomeClass *> const &>
PUBLIC	??$construct@PAVSomeClass@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::construct<SomeClass *,SomeClass *>
PUBLIC	??$forward@PAVSomeClass@@@std@@YA$$QAPAVSomeClass@@AAPAV1@@Z ; std::forward<SomeClass *>
PUBLIC	??$addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@@Z ; std::addressof<SomeClass *>
PUBLIC	??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00@Z ; std::_Move<SomeClass * *,SomeClass * *>
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?max_size@?$allocator@PAVSomeClass@@@std@@QBEIXZ ; std::allocator<SomeClass *>::max_size
PUBLIC	?allocate@?$allocator@PAVSomeClass@@@std@@QAEPAPAVSomeClass@@I@Z ; std::allocator<SomeClass *>::allocate
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAIABV?$allocator@PAVSomeClass@@@2@@Z ; std::allocator_traits<std::allocator<SomeClass *> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@I@Z ; std::allocator<SomeClass *>::deallocate
PUBLIC	?capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::capacity
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Getal
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myend
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEPAPAVSomeClass@@I@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::allocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::max_size
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_second
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?_Unused_capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Unused_capacity
PUBLIC	?max_size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::max_size
PUBLIC	?_Grow_to@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEII@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Grow_to
PUBLIC	?_Reallocate@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reallocate
PUBLIC	?_Xlen@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Xlen
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Orphan_all
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Get_data
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_second
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??0?$allocator@PAVSomeClass@@@std@@QAE@XZ	; std::allocator<SomeClass *>::allocator<SomeClass *>
PUBLIC	?_Make_iter@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Make_iter
PUBLIC	?_Destroy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXPAPAVSomeClass@@0@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Destroy
PUBLIC	?_Inside@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBE_NPBQAVSomeClass@@@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Inside
PUBLIC	?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Tidy
PUBLIC	?_Xran@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Xran
PUBLIC	?_Orphan_range@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXPAPAVSomeClass@@0@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Orphan_range
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myend
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >
PUBLIC	??0?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::vector<SomeClass *,std::allocator<SomeClass *> >
PUBLIC	?push_back@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEX$$QAPAVSomeClass@@@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::push_back
PUBLIC	??1?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::~vector<SomeClass *,std::allocator<SomeClass *> >
PUBLIC	?begin@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@XZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::begin
PUBLIC	?size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::size
PUBLIC	?at@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::at
PUBLIC	??A?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::operator[]
PUBLIC	?erase@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::erase
PUBLIC	??_GVectorOptimizationTest@@QAEPAXI@Z		; VectorOptimizationTest::`scalar deleting destructor'
PUBLIC	_main
PUBLIC	?GetIdxRaw@VectorOptimizationTest@@QAEIXZ	; VectorOptimizationTest::GetIdxRaw
PUBLIC	?GetIdxAt@VectorOptimizationTest@@QAEIXZ	; VectorOptimizationTest::GetIdxAt
PUBLIC	??1VectorOptimizationTest@@QAE@XZ		; VectorOptimizationTest::~VectorOptimizationTest
PUBLIC	??0VectorOptimizationTest@@QAE@I@Z		; VectorOptimizationTest::VectorOptimizationTest
PUBLIC	?GetX@SomeClass@@QAEDXZ				; SomeClass::GetX
PUBLIC	??0SomeClass@@QAE@XZ				; SomeClass::SomeClass
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	??2@YAPAXIPAX@Z					; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0VectorOptimizationTest@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VectorOptimizationTest@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0VectorOptimizationTest@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VectorOptimizationTest@@QAE@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$_main DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$10
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; __Size$dead$ = ecx
; __Where$ = edx

; 88   :         (void)_Size;
; 89   :         return _Where;

  00000	8b c2		 mov	 eax, edx

; 90   :     }

  00002	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; __First$ = ecx

; 523  : 		return (*_First == 0 ? 0

  00000	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00003	75 03		 jne	 SHORT $LN3@length
  00005	33 c0		 xor	 eax, eax

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  00007	c3		 ret	 0
$LN3@length:

; 523  : 		return (*_First == 0 ? 0

  00008	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000b	0f 1f 44 00 00	 npad	 5
$LL5@length:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL5@length
  00017	2b ca		 sub	 ecx, edx
  00019	8b c1		 mov	 eax, ecx

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0001b	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 595  : 		return (_Left == _Right);

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00006	0f 94 c0	 sete	 al

; 596  : 		}

  00009	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 606  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 607  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$dead$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT ??0SomeClass@@QAE@XZ
_TEXT	SEGMENT
??0SomeClass@@QAE@XZ PROC				; SomeClass::SomeClass, COMDAT
; _this$ = ecx

; 12   : 	{ }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 11   : 		: x(rand() % 0x100)

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00009	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  0000e	79 07		 jns	 SHORT $LN3@SomeClass
  00010	48		 dec	 eax
  00011	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00016	40		 inc	 eax
$LN3@SomeClass:
  00017	88 06		 mov	 BYTE PTR [esi], al

; 12   : 	{ }

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c3		 ret	 0
??0SomeClass@@QAE@XZ ENDP				; SomeClass::SomeClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT ?GetX@SomeClass@@QAEDXZ
_TEXT	SEGMENT
?GetX@SomeClass@@QAEDXZ PROC				; SomeClass::GetX, COMDAT
; _this$ = ecx

; 16   : 		return x;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 17   : 	}

  00002	c3		 ret	 0
?GetX@SomeClass@@QAEDXZ ENDP				; SomeClass::GetX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT ??0VectorOptimizationTest@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T3 = -16						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_number$dead$ = 8					; size = 4
??0VectorOptimizationTest@@QAE@I@Z PROC			; VectorOptimizationTest::VectorOptimizationTest, COMDAT
; _this$ = ecx

; 26   : 	VectorOptimizationTest(size_t number)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0VectorOptimizationTest@@QAE@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 481  : 		_Mylast = pointer();

  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 482  : 		_Myend = pointer();

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File d:\development\projects\optimizationtest\main.cxx

; 27   : 	{

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00048	bb 00 01 00 00	 mov	 ebx, 256		; 00000100H
  0004d	0f 1f 00	 npad	 3
$LL4@VectorOpti:
; File d:\development\projects\optimizationtest\main.cxx

; 30   : 			someVector.push_back(new SomeClass());

  00050	6a 01		 push	 1
  00052	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00057	83 c4 04	 add	 esp, 4
  0005a	8b f8		 mov	 edi, eax
  0005c	89 7d f0	 mov	 DWORD PTR $T3[ebp], edi

; 11   : 		: x(rand() % 0x100)

  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00065	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  0006a	79 07		 jns	 SHORT $LN259@VectorOpti
  0006c	48		 dec	 eax
  0006d	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00072	40		 inc	 eax
$LN259@VectorOpti:
  00073	88 07		 mov	 BYTE PTR [edi], al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00075	8d 45 f0	 lea	 eax, DWORD PTR $T5[ebp]
  00078	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File d:\development\projects\optimizationtest\main.cxx

; 30   : 			someVector.push_back(new SomeClass());

  0007b	89 7d f0	 mov	 DWORD PTR $T5[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0007e	3b c1		 cmp	 eax, ecx
  00080	73 2d		 jae	 SHORT $LN28@VectorOpti
  00082	8b 06		 mov	 eax, DWORD PTR [esi]
  00084	8d 55 f0	 lea	 edx, DWORD PTR $T5[ebp]
  00087	3b c2		 cmp	 eax, edx
  00089	77 24		 ja	 SHORT $LN28@VectorOpti

; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  0008b	8b fa		 mov	 edi, edx
  0008d	2b f8		 sub	 edi, eax
  0008f	c1 ff 02	 sar	 edi, 2

; 899  : 			if (this->_Mylast() == this->_Myend())

  00092	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00095	75 08		 jne	 SHORT $LN30@VectorOpti

; 900  : 				_Reserve(1);

  00097	51		 push	 ecx
  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve
$LN30@VectorOpti:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	85 c9		 test	 ecx, ecx
  000a4	74 1f		 je	 SHORT $LN237@VectorOpti
  000a6	8b 06		 mov	 eax, DWORD PTR [esi]
  000a8	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000ab	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 906  : 		else

  000ad	eb 16		 jmp	 SHORT $LN237@VectorOpti
$LN28@VectorOpti:

; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())

  000af	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  000b2	75 08		 jne	 SHORT $LN31@VectorOpti

; 909  : 				_Reserve(1);

  000b4	51		 push	 ecx
  000b5	8b ce		 mov	 ecx, esi
  000b7	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve
$LN31@VectorOpti:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000bc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bf	85 c0		 test	 eax, eax
  000c1	74 02		 je	 SHORT $LN237@VectorOpti
  000c3	89 38		 mov	 DWORD PTR [eax], edi
$LN237@VectorOpti:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 913  : 			++this->_Mylast();

  000c5	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File d:\development\projects\optimizationtest\main.cxx

; 28   : 		for (size_t i = 0; i < number; ++i)

  000c9	83 eb 01	 sub	 ebx, 1
  000cc	75 82		 jne	 SHORT $LL4@VectorOpti

; 31   : 		}
; 32   : 	}

  000ce	8b c6		 mov	 eax, esi
  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VectorOptimizationTest@@QAE@I@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ ; std::vector<SomeClass *,std::allocator<SomeClass *> >::~vector<SomeClass *,std::allocator<SomeClass *> >
__ehhandler$??0VectorOptimizationTest@@QAE@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0VectorOptimizationTest@@QAE@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0VectorOptimizationTest@@QAE@I@Z ENDP			; VectorOptimizationTest::VectorOptimizationTest
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT ??1VectorOptimizationTest@@QAE@XZ
_TEXT	SEGMENT
??1VectorOptimizationTest@@QAE@XZ PROC			; VectorOptimizationTest::~VectorOptimizationTest, COMDAT
; _this$ = ecx

; 35   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	2b 06		 sub	 eax, DWORD PTR [esi]
; File d:\development\projects\optimizationtest\main.cxx

; 36   : 		while(someVector.size())

  00008	a9 fc ff ff ff	 test	 eax, -4			; fffffffcH
  0000d	74 38		 je	 SHORT $LN3@VectorOpti
  0000f	57		 push	 edi
  00010	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__memmove
$LL2@VectorOpti:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\development\projects\optimizationtest\main.cxx

; 38   : 			delete someVector[0];

  00018	6a 01		 push	 1
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 39   : 			someVector.erase(someVector.begin());

  00021	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00023	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),

  00026	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00029	2b ca		 sub	 ecx, edx

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  0002b	83 e1 fc	 and	 ecx, -4			; fffffffcH
  0002e	51		 push	 ecx
  0002f	52		 push	 edx
  00030	50		 push	 eax
  00031	ff d7		 call	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  00033	83 46 04 fc	 add	 DWORD PTR [esi+4], -4	; fffffffcH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00037	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  0003a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003d	2b 06		 sub	 eax, DWORD PTR [esi]
; File d:\development\projects\optimizationtest\main.cxx

; 36   : 		while(someVector.size())

  0003f	a9 fc ff ff ff	 test	 eax, -4			; fffffffcH
  00044	75 d0		 jne	 SHORT $LL2@VectorOpti
  00046	5f		 pop	 edi
$LN3@VectorOpti:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 23		 je	 SHORT $LN123@VectorOpti

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00050	2b c1		 sub	 eax, ecx
  00052	c1 f8 02	 sar	 eax, 2
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0005c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00062	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00069	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN123@VectorOpti:
  00070	5e		 pop	 esi
; File d:\development\projects\optimizationtest\main.cxx

; 41   : 	}

  00071	c3		 ret	 0
??1VectorOptimizationTest@@QAE@XZ ENDP			; VectorOptimizationTest::~VectorOptimizationTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT ?GetIdxAt@VectorOptimizationTest@@QAEIXZ
_TEXT	SEGMENT
?GetIdxAt@VectorOptimizationTest@@QAEIXZ PROC		; VectorOptimizationTest::GetIdxAt, COMDAT
; _this$dead$ = ecx

; 44   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?test@@3PAVVectorOptimizationTest@@A ; test

; 45   : 		for (size_t i = 0; i < someVector.size(); ++i)

  0000a	33 c0		 xor	 eax, eax
  0000c	56		 push	 esi
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	8b f2		 mov	 esi, edx
  00013	8b 39		 mov	 edi, DWORD PTR [ecx]
  00015	2b f7		 sub	 esi, edi
  00017	c1 fe 02	 sar	 esi, 2
; File d:\development\projects\optimizationtest\main.cxx

; 45   : 		for (size_t i = 0; i < someVector.size(); ++i)

  0001a	85 f6		 test	 esi, esi
  0001c	74 16		 je	 SHORT $LN3@GetIdxAt
  0001e	2b d7		 sub	 edx, edi
  00020	c1 fa 02	 sar	 edx, 2
$LL4@GetIdxAt:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1206 : 		if (size() <= _Pos)

  00023	3b d0		 cmp	 edx, eax
  00025	76 16		 jbe	 SHORT $LN68@GetIdxAt
; File d:\development\projects\optimizationtest\main.cxx

; 16   : 		return x;

  00027	8b 0c 87	 mov	 ecx, DWORD PTR [edi+eax*4]

; 46   : 		{
; 47   : 			if (someVector.at(i)->GetX() == 0x15)

  0002a	80 39 15	 cmp	 BYTE PTR [ecx], 21	; 00000015H
  0002d	74 08		 je	 SHORT $LN1@GetIdxAt

; 45   : 		for (size_t i = 0; i < someVector.size(); ++i)

  0002f	40		 inc	 eax
  00030	3b c6		 cmp	 eax, esi
  00032	72 ef		 jb	 SHORT $LL4@GetIdxAt
$LN3@GetIdxAt:

; 48   : 			{
; 49   : 				return i;
; 50   : 			}
; 51   : 		}
; 52   : 		return (size_t)-1;

  00034	83 c8 ff	 or	 eax, -1
$LN1@GetIdxAt:
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 53   : 	}

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN68@GetIdxAt:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN75@GetIdxAt:
$LN74@GetIdxAt:
  00048	cc		 int	 3
?GetIdxAt@VectorOptimizationTest@@QAEIXZ ENDP		; VectorOptimizationTest::GetIdxAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT ?GetIdxRaw@VectorOptimizationTest@@QAEIXZ
_TEXT	SEGMENT
?GetIdxRaw@VectorOptimizationTest@@QAEIXZ PROC		; VectorOptimizationTest::GetIdxRaw, COMDAT
; _this$dead$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?test@@3PAVVectorOptimizationTest@@A ; test

; 57   : 		for (size_t i = 0; i < someVector.size(); ++i)

  0000a	33 c0		 xor	 eax, eax
  0000c	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000d	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	2b f2		 sub	 esi, edx
  00014	c1 fe 02	 sar	 esi, 2
; File d:\development\projects\optimizationtest\main.cxx

; 57   : 		for (size_t i = 0; i < someVector.size(); ++i)

  00017	85 f6		 test	 esi, esi
  00019	74 14		 je	 SHORT $LN3@GetIdxRaw
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@GetIdxRaw:

; 16   : 		return x;

  00020	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 58   : 		{
; 59   : 			if (someVector[i]->GetX() == 0x15)

  00022	80 39 15	 cmp	 BYTE PTR [ecx], 21	; 00000015H
  00025	74 0b		 je	 SHORT $LN1@GetIdxRaw

; 57   : 		for (size_t i = 0; i < someVector.size(); ++i)

  00027	40		 inc	 eax
  00028	83 c2 04	 add	 edx, 4
  0002b	3b c6		 cmp	 eax, esi
  0002d	72 f1		 jb	 SHORT $LL4@GetIdxRaw
$LN3@GetIdxRaw:

; 60   : 			{
; 61   : 				return i;
; 62   : 			}
; 63   : 		}
; 64   : 		return (size_t)-1;

  0002f	83 c8 ff	 or	 eax, -1
$LN1@GetIdxRaw:
  00032	5e		 pop	 esi

; 65   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?GetIdxRaw@VectorOptimizationTest@@QAEIXZ ENDP		; VectorOptimizationTest::GetIdxRaw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File d:\development\projects\optimizationtest\main.cxx
;	COMDAT _main
_TEXT	SEGMENT
$T1 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_main	PROC						; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 72   : 	test = new VectorOptimizationTest(0x100);

  00025	6a 0c		 push	 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  0002f	8b c8		 mov	 ecx, eax
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	e8 00 00 00 00	 call	 ??0VectorOptimizationTest@@QAE@I@Z ; VectorOptimizationTest::VectorOptimizationTest
  0003d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 45   : 		for (size_t i = 0; i < someVector.size(); ++i)

  00044	33 c9		 xor	 ecx, ecx

; 72   : 	test = new VectorOptimizationTest(0x100);

  00046	a3 00 00 00 00	 mov	 DWORD PTR ?test@@3PAVVectorOptimizationTest@@A, eax ; test
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0004b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004e	8b f2		 mov	 esi, edx
  00050	8b 38		 mov	 edi, DWORD PTR [eax]
  00052	2b f7		 sub	 esi, edi
  00054	c1 fe 02	 sar	 esi, 2
; File d:\development\projects\optimizationtest\main.cxx

; 45   : 		for (size_t i = 0; i < someVector.size(); ++i)

  00057	85 f6		 test	 esi, esi
  00059	74 1a		 je	 SHORT $LN12@main
  0005b	2b d7		 sub	 edx, edi
  0005d	c1 fa 02	 sar	 edx, 2
$LL13@main:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1206 : 		if (size() <= _Pos)

  00060	3b d1		 cmp	 edx, ecx
  00062	0f 86 ba 00 00
	00		 jbe	 $LN125@main
; File d:\development\projects\optimizationtest\main.cxx

; 16   : 		return x;

  00068	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]

; 46   : 		{
; 47   : 			if (someVector.at(i)->GetX() == 0x15)

  0006b	80 38 15	 cmp	 BYTE PTR [eax], 21	; 00000015H
  0006e	74 08		 je	 SHORT $LN10@main

; 45   : 		for (size_t i = 0; i < someVector.size(); ++i)

  00070	41		 inc	 ecx
  00071	3b ce		 cmp	 ecx, esi
  00073	72 eb		 jb	 SHORT $LL13@main
$LN12@main:

; 48   : 			{
; 49   : 				return i;
; 50   : 			}
; 51   : 		}
; 52   : 		return (size_t)-1;

  00075	83 c9 ff	 or	 ecx, -1
$LN10@main:

; 73   : 	{
; 74   : 		std::cout << "<<< AT  : " << test->GetIdxAt()  << " >>>" << std::endl;

  00078	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0007d	51		 push	 ecx
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00084	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@FNFMFEBM@?$DM?$DM?$DM?5AT?5?5?3?5?$AA@
  00089	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0008e	8b c8		 mov	 ecx, eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00096	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04IHNIHLJD@?5?$DO?$DO?$DO?$AA@
  0009b	8b c8		 mov	 ecx, eax
  0009d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000a2	8b c8		 mov	 ecx, eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 75   : 		std::cout << "<<< RAW : " << test->GetIdxRaw() << " >>>" << std::endl;

  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?test@@3PAVVectorOptimizationTest@@A ; test

; 57   : 		for (size_t i = 0; i < someVector.size(); ++i)

  000af	33 c9		 xor	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000b1	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000b4	8b 10		 mov	 edx, DWORD PTR [eax]
  000b6	2b f2		 sub	 esi, edx
  000b8	c1 fe 02	 sar	 esi, 2
; File d:\development\projects\optimizationtest\main.cxx

; 57   : 		for (size_t i = 0; i < someVector.size(); ++i)

  000bb	85 f6		 test	 esi, esi
  000bd	74 10		 je	 SHORT $LN79@main
  000bf	90		 npad	 1
$LL80@main:

; 16   : 		return x;

  000c0	8b 02		 mov	 eax, DWORD PTR [edx]

; 58   : 		{
; 59   : 			if (someVector[i]->GetX() == 0x15)

  000c2	80 38 15	 cmp	 BYTE PTR [eax], 21	; 00000015H
  000c5	74 0b		 je	 SHORT $LN77@main

; 57   : 		for (size_t i = 0; i < someVector.size(); ++i)

  000c7	41		 inc	 ecx
  000c8	83 c2 04	 add	 edx, 4
  000cb	3b ce		 cmp	 ecx, esi
  000cd	72 f1		 jb	 SHORT $LL80@main
$LN79@main:

; 60   : 			{
; 61   : 				return i;
; 62   : 			}
; 63   : 		}
; 64   : 		return (size_t)-1;

  000cf	83 c9 ff	 or	 ecx, -1
$LN77@main:

; 75   : 		std::cout << "<<< RAW : " << test->GetIdxRaw() << " >>>" << std::endl;

  000d2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000d7	51		 push	 ecx
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000de	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@BDIDHNLI@?$DM?$DM?$DM?5RAW?5?3?5?$AA@
  000e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000e8	8b c8		 mov	 ecx, eax
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  000f0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04IHNIHLJD@?5?$DO?$DO?$DO?$AA@
  000f5	8b c8		 mov	 ecx, eax
  000f7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000fc	8b c8		 mov	 ecx, eax
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 76   : 	}
; 77   : 	delete test;

  00104	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?test@@3PAVVectorOptimizationTest@@A ; test
  0010a	85 f6		 test	 esi, esi
  0010c	74 12		 je	 SHORT $LL2@main
  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ??1VectorOptimizationTest@@QAE@XZ ; VectorOptimizationTest::~VectorOptimizationTest
  00115	6a 0c		 push	 12			; 0000000cH
  00117	56		 push	 esi
  00118	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011d	83 c4 08	 add	 esp, 8
$LL2@main:

; 78   : 	while (true);

  00120	eb fe		 jmp	 SHORT $LL2@main
$LN125@main:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN148@main:
$LN147@main:
  0012d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
  00000	6a 0c		 push	 12			; 0000000cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$_main:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_main
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Ogtp
;	COMDAT ??_GVectorOptimizationTest@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GVectorOptimizationTest@@QAEPAXI@Z PROC		; VectorOptimizationTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1VectorOptimizationTest@@QAE@XZ ; VectorOptimizationTest::~VectorOptimizationTest
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00010	83 c4 08	 add	 esp, 8
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??_GVectorOptimizationTest@@QAEPAXI@Z ENDP		; VectorOptimizationTest::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::erase, COMDAT
; _this$ = ecx

; 1484 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  0000d	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00010	2b d6		 sub	 edx, esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00012	83 e2 fc	 and	 edx, -4			; fffffffcH
  00015	52		 push	 edx
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  00024	83 47 04 fc	 add	 DWORD PTR [edi+4], -4	; fffffffcH

; 46   : 		: _Ptr(_Parg)

  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0002b	5f		 pop	 edi
  0002c	89 08		 mov	 DWORD PTR [eax], ecx
  0002e	5e		 pop	 esi

; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?erase@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?at@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::at, COMDAT
; _this$ = ecx

; 1205 : 		{	// subscript mutable sequence with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	2b c2		 sub	 eax, edx

; 1206 : 		if (size() <= _Pos)

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000d	c1 f8 02	 sar	 eax, 2

; 1206 : 		if (size() <= _Pos)

  00010	3b c1		 cmp	 eax, ecx
  00012	77 0b		 ja	 SHORT $LN2@at

; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	__declspec(noreturn) void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");
; 1785 : 		}
; 1786 : 
; 1787 : 	__declspec(noreturn) void _Xran() const
; 1788 : 		{	// report an out_of_range error
; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN39@at:
$LN2@at:

; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));

  0001f	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]

; 1209 : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN38@at:
?at@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEAAPAVSomeClass@@I@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@XZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@XZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::~vector<SomeClass *,std::allocator<SomeClass *> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 23		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00025	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002d	c3		 ret	 0
??1?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::~vector<SomeClass *,std::allocator<SomeClass *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEX$$QAPAVSomeClass@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEX$$QAPAVSomeClass@@@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::push_back, COMDAT
; _this$ = ecx

; 895  : 		{	// insert by moving into element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 30		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2a		 ja	 SHORT $LN2@push_back

; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 899  : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 08		 jne	 SHORT $LN4@push_back

; 900  : 				_Reserve(1);

  00021	51		 push	 ecx
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00029	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 29		 je	 SHORT $LN211@push_back
  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 913  : 			++this->_Mylast();

  00037	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 914  : 			}
; 915  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN2@push_back:

; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())

  00041	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00044	75 08		 jne	 SHORT $LN5@push_back

; 909  : 				_Reserve(1);

  00046	51		 push	 ecx
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	85 c9		 test	 ecx, ecx
  00053	74 04		 je	 SHORT $LN211@push_back
  00055	8b 07		 mov	 eax, DWORD PTR [edi]
  00057	89 01		 mov	 DWORD PTR [ecx], eax
$LN211@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 913  : 			++this->_Mylast();

  00059	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 914  : 			}
; 915  : 		}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?push_back@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAEX$$QAPAVSomeClass@@@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::vector<SomeClass *,std::allocator<SomeClass *> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@XZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::vector<SomeClass *,std::allocator<SomeClass *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAPAPAVSomeClass@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXPAPAVSomeClass@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXPAPAVSomeClass@@0@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXPAPAVSomeClass@@0@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xran@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xran@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Xran, COMDAT
; _this$dead$ = ecx

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 23		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00025	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002d	c3		 ret	 0
?_Tidy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00004	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00007	8b c7		 mov	 eax, edi
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	2b c2		 sub	 eax, edx
  0000e	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00011	83 f8 01	 cmp	 eax, 1
  00014	73 48		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	2b d1		 sub	 edx, ecx
  0001a	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001b	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00020	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00023	8b c3		 mov	 eax, ebx
  00025	2b c2		 sub	 eax, edx
  00027	83 f8 01	 cmp	 eax, 1
  0002a	73 0b		 jae	 SHORT $LN3@Reserve

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	__declspec(noreturn) void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00037	2b f9		 sub	 edi, ecx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00039	42		 inc	 edx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0003a	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0003d	8b c7		 mov	 eax, edi
  0003f	d1 e8		 shr	 eax, 1
  00041	2b d8		 sub	 ebx, eax
  00043	3b df		 cmp	 ebx, edi
  00045	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00048	b8 00 00 00 00	 mov	 eax, 0
  0004d	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00050	3b ca		 cmp	 ecx, edx
  00052	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00055	51		 push	 ecx
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reallocate
  0005d	5b		 pop	 ebx
$LN2@Reserve:

; 1651 : 			}
; 1652 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	c2 04 00	 ret	 4
$LN134@Reserve:
?_Reserve@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBE_NPBQAVSomeClass@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBE_NPBQAVSomeClass@@@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBE_NPBQAVSomeClass@@@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXPAPAVSomeClass@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXPAPAVSomeClass@@0@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXPAPAVSomeClass@@0@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Make_iter, COMDAT
; _this$dead$ = ecx

; 1076 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@2@@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVSomeClass@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVSomeClass@@@std@@QAE@XZ PROC		; std::allocator<SomeClass *>::allocator<SomeClass *>, COMDAT
; _this$ = ecx

; 620  : 		{	// construct default allocator (do nothing)
; 621  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVSomeClass@@@std@@QAE@XZ ENDP		; std::allocator<SomeClass *>::allocator<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 142  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 143  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  0002b	84 c0		 test	 al, al
  0002d	75 08		 jne	 SHORT $LN2@sentry

; 133  : 				this->_Myostr._Osfx();

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 106  : 			{	// destroy after unlocking

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 107  : 			if (_Myostr.rdbuf() != 0)

  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 05		 je	 SHORT $LN5@sentry

; 108  : 				_Myostr.rdbuf()->_Unlock();

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_terminate
  00006	c3		 ret	 0
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00007	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00011	33 c8		 xor	 ecx, eax
  00013	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00018	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 99   : 			: _Myostr(_Ostr)

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 88   : 		return (_Mystrbuf);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 101  : 			if (_Myostr.rdbuf() != 0)

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN6@sentry

; 102  : 				_Myostr.rdbuf()->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN6@sentry:

; 103  : 			}
; 104  : 
; 105  : 		__CLR_OR_THIS_CALL ~_Sentry_base() _NOEXCEPT
; 106  : 			{	// destroy after unlocking
; 107  : 			if (_Myostr.rdbuf() != 0)
; 108  : 				_Myostr.rdbuf()->_Unlock();
; 109  : 			}
; 110  : 
; 111  : 		_Myt& _Myostr;	// the output stream, for _Unlock call at destruction
; 112  : 
; 113  : 	private:
; 114  : 		_Sentry_base& operator=(const _Sentry_base&);
; 115  : 		};
; 116  : 
; 117  : 	class sentry
; 118  : 		: public _Sentry_base
; 119  : 		{	// stores thread lock and state of stream
; 120  : 	public:
; 121  : 		explicit __CLR_OR_THIS_CALL sentry(_Myt& _Ostr)
; 122  : 			: _Sentry_base(_Ostr)

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 308  : 		return (_Mystate);

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 330  : 		return (rdstate() == goodbit);

  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00052	75 12		 jne	 SHORT $LN2@sentry
  00054	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 0a		 je	 SHORT $LN2@sentry
  0005c	3b ce		 cmp	 ecx, esi
  0005e	74 06		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
$LN2@sentry:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 330  : 		return (rdstate() == goodbit);

  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006b	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00070	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00073	88 47 04	 mov	 BYTE PTR [edi+4], al

; 127  : 			}

  00076	8b c7		 mov	 eax, edi
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@@std@@QAE@PAPAVSomeClass@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 910  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 			-> void
; 436  : 		{	// call default version
; 437  : 		::new (static_cast<void *>(_Ptr))
; 438  : 			_Objty(_STD forward<_Types>(_Args)...);
; 439  : 		}
; 440  : 
; 441  : 	};
; 442  : 
; 443  : 		// STRUCT _Alloc_destroy
; 444  : struct _Alloc_destroy
; 445  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 446  : 	template<class _Ty,
; 447  : 		class _Objty>
; 448  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 449  : 			-> decltype(_Al.destroy(_Ptr))
; 450  : 		{	// call allocator supplied version
; 451  : 		_Al.destroy(_Ptr);
; 452  : 		}
; 453  : 
; 454  : 	template<class _Ty,
; 455  : 		class _Objty>
; 456  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 457  : 			-> void
; 458  : 		{	// call default version
; 459  : 		_Ptr->~_Objty();
; 460  : 		}
; 461  : 	};
; 462  : 
; 463  : 		// STRUCT _Alloc_max_size
; 464  : struct _Alloc_max_size
; 465  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 466  : 	template<class _Ty>
; 467  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 468  : 			-> decltype(_Al.max_size())
; 469  : 		{	// call allocator supplied version
; 470  : 		return (_Al.max_size());
; 471  : 		}
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 475  : 			-> typename _Get_size_type<_Ty>::type
; 476  : 		{	// call default version
; 477  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 478  : 		}
; 479  : 	};
; 480  : 
; 481  : 		// STRUCT _Alloc_select
; 482  : struct _Alloc_select
; 483  : 	{	// determines allocator_traits<_Ty>
; 484  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 485  : 
; 486  : 	template<class _Ty>
; 487  : 		static auto _Fn(int, const _Ty& _Al)
; 488  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 489  : 		{	// call allocator supplied version
; 490  : 		return (_Al.select_on_container_copy_construction());
; 491  : 		}
; 492  : 
; 493  : 	template<class _Ty>
; 494  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 495  : 			-> _Ty
; 496  : 		{	// call default version
; 497  : 		return (_Al);
; 498  : 		}
; 499  : 	};
; 500  : 
; 501  : 		// TEMPLATE CLASS allocator_traits
; 502  : template<class _Alloc>
; 503  : 	struct allocator_traits
; 504  : 	{	// defines traits for allocators
; 505  : 	typedef _Alloc allocator_type;
; 506  : 	typedef typename _Alloc::value_type value_type;
; 507  : 
; 508  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 509  : 		pointer;
; 510  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 511  : 		const_pointer;
; 512  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 513  : 		void_pointer;
; 514  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 515  : 		const_void_pointer;
; 516  : 
; 517  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 518  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 519  : 
; 520  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 521  : 		propagate_on_container_copy_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 523  : 		propagate_on_container_move_assignment;
; 524  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 525  : 		propagate_on_container_swap;
; 526  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 527  : 		is_always_equal;
; 528  : 
; 529  : 	template<class _Other>
; 530  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 531  : 
; 532  : 	template<class _Other>
; 533  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 534  : 
; 535  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 536  : 		{	// allocate array of _Count elements
; 537  : 		return (_Al.allocate(_Count));
; 538  : 		}
; 539  : 
; 540  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 541  : 		const_void_pointer _Hint)
; 542  : 		{	// allocate array of _Count elements, with hint
; 543  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 544  : 		}
; 545  : 
; 546  : 	static void deallocate(_Alloc& _Al,
; 547  : 		pointer _Ptr, size_type _Count)
; 548  : 		{	// deallocate _Count elements at _Ptr
; 549  : 		_Al.deallocate(_Ptr, _Count);
; 550  : 		}
; 551  : 
; 552  : 	template<class _Ty,
; 553  : 		class... _Types>
; 554  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 555  : 			_Types&&... _Args)
; 556  : 		{	// construct _Ty(_Types...) at _Ptr
; 557  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 558  : 			_STD forward<_Types>(_Args)...);
; 559  : 		}
; 560  : 
; 561  : 
; 562  : 	template<class _Ty>
; 563  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 564  : 		{	// destroy object at _Ptr
; 565  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 566  : 		}
; 567  : 
; 568  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 569  : 		{	// get maximum size
; 570  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 571  : 		}
; 572  : 
; 573  : 	static _Alloc select_on_container_copy_construction(
; 574  : 		const _Alloc& _Al)
; 575  : 		{	// get allocator to use
; 576  : 		return (_Alloc_select::_Fn(0, _Al));
; 577  : 		}
; 578  : 	};
; 579  : 
; 580  : 		// TEMPLATE CLASS allocator
; 581  : template<class _Ty>
; 582  : 	class allocator
; 583  : 	{	// generic allocator for objects of class _Ty
; 584  : public:
; 585  : 	static_assert(!is_const<_Ty>::value,
; 586  : 		"The C++ Standard forbids containers of const elements "
; 587  : 		"because allocator<const T> is ill-formed.");
; 588  : 
; 589  : 	typedef _Ty value_type;
; 590  : 
; 591  : 	typedef value_type *pointer;
; 592  : 	typedef const value_type *const_pointer;
; 593  : 
; 594  : 	typedef value_type& reference;
; 595  : 	typedef const value_type& const_reference;
; 596  : 
; 597  : 	typedef size_t size_type;
; 598  : 	typedef ptrdiff_t difference_type;
; 599  : 
; 600  : 	typedef true_type propagate_on_container_move_assignment;
; 601  : 	typedef true_type is_always_equal;
; 602  : 
; 603  : 	template<class _Other>
; 604  : 		struct rebind
; 605  : 		{	// convert this type to allocator<_Other>
; 606  : 		typedef allocator<_Other> other;
; 607  : 		};
; 608  : 
; 609  : 	pointer address(reference _Val) const _NOEXCEPT
; 610  : 		{	// return address of mutable _Val
; 611  : 		return (_STD addressof(_Val));
; 612  : 		}
; 613  : 
; 614  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 615  : 		{	// return address of nonmutable _Val
; 616  : 		return (_STD addressof(_Val));
; 617  : 		}
; 618  : 
; 619  : 	allocator() _THROW0()
; 620  : 		{	// construct default allocator (do nothing)
; 621  : 		}
; 622  : 
; 623  : 	allocator(const allocator<_Ty>&) _THROW0()
; 624  : 		{	// construct by copying (do nothing)
; 625  : 		}
; 626  : 
; 627  : 	template<class _Other>
; 628  : 		allocator(const allocator<_Other>&) _THROW0()
; 629  : 		{	// construct from a related allocator (do nothing)
; 630  : 		}
; 631  : 
; 632  : 	template<class _Other>
; 633  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 634  : 		{	// assign from a related allocator (do nothing)
; 635  : 		return (*this);
; 636  : 		}
; 637  : 
; 638  : 	void deallocate(pointer _Ptr, size_type _Count)
; 639  : 		{	// deallocate object at _Ptr
; 640  : 		_Deallocate(_Ptr, _Count);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	76 06		 jbe	 SHORT $LN6@deallocate
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@deallocate:
$LN6@deallocate:

; 101  : 	const size_t _User_size = _Count * sizeof (_Ty);

  00016	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00019	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001e	72 32		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00020	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00023	74 06		 je	 SHORT $LN8@deallocate
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN8@deallocate:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002b	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002e	3b c1		 cmp	 eax, ecx
  00030	72 06		 jb	 SHORT $LN9@deallocate
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN9@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c8		 sub	 ecx, eax
  0003a	83 f9 04	 cmp	 ecx, 4
  0003d	73 06		 jae	 SHORT $LN10@deallocate
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN10@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00045	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00048	76 06		 jbe	 SHORT $LN11@deallocate
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN11@deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<_Ty *>(_Ptr_container);

  00050	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00058	83 c4 04	 add	 esp, 4

; 911  : 		_Mybase::deallocate(_Ptr, _Count);
; 912  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN16@deallocate:
?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Xlen, COMDAT
; _this$dead$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEXXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 57   : 	if (_Count == 0)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		{	// move to array of exactly _Count elements

  00009	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 57   : 	if (_Count == 0)

  0000b	85 db		 test	 ebx, ebx
  0000d	75 50		 jne	 SHORT $LN20@Reallocate

; 58   : 		return (static_cast<_Ty *>(_Ptr));

  0000f	33 f6		 xor	 esi, esi
$LN26@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00011	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	2b c1		 sub	 eax, ecx

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00018	83 e0 fc	 and	 eax, -4			; fffffffcH
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	56		 push	 esi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	2b c1		 sub	 eax, ecx
  0002e	c1 f8 02	 sar	 eax, 2
  00031	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00034	85 c9		 test	 ecx, ecx
  00036	74 0f		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00038	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0003b	2b c1		 sub	 eax, ecx
  0003d	c1 f8 02	 sar	 eax, 2
  00040	50		 push	 eax
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@I@Z ; std::_Wrap_alloc<std::allocator<SomeClass *> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00047	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]
  0004a	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00050	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00053	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00056	89 37		 mov	 DWORD PTR [edi], esi
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx

; 1642 : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN20@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 61   : 	if ((size_t)(-1) / sizeof (_Ty) < _Count)

  0005f	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00065	76 06		 jbe	 SHORT $LN21@Reallocate

; 62   : 		_Xbad_alloc();	// report no memory

  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN191@Reallocate:
$LN21@Reallocate:

; 63   : 	const size_t _User_size = _Count * sizeof (_Ty);

  0006d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00074	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00079	72 2e		 jb	 SHORT $LN22@Reallocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0007b	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  0007e	3b c8		 cmp	 ecx, eax
  00080	77 06		 ja	 SHORT $LN24@Reallocate

; 73   : 			_Xbad_alloc();	// report no memory

  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN192@Reallocate:
$LN24@Reallocate:

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00091	85 c0		 test	 eax, eax
  00093	75 06		 jne	 SHORT $LN25@Reallocate
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN193@Reallocate:
$LN25@Reallocate:

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0009b	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  0009e	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000a1	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else

  000a4	e9 68 ff ff ff	 jmp	 $LN26@Reallocate
$LN22@Reallocate:

; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000af	8b f0		 mov	 esi, eax
  000b1	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  000b4	85 f6		 test	 esi, esi
  000b6	0f 85 55 ff ff
	ff		 jne	 $LN26@Reallocate
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN194@Reallocate:
$LN190@Reallocate:
  000c2	cc		 int	 3
?_Reallocate@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEII@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IBEII@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 107  : 			if (_Myostr.rdbuf() != 0)

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 109  : 			}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 			: _Myostr(_Ostr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi

; 100  : 			{	// lock the stream buffer, if there

  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN8@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@Sentry_bas:

; 103  : 			}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<SomeClass *> >::max_size, COMDAT
; _this$dead$ = ecx

; 932  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 933  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SomeClass *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEPAPAVSomeClass@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEPAPAVSomeClass@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SomeClass *> >::allocate, COMDAT
; _this$dead$ = ecx

; 899  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN6@allocate
$LN15@allocate:

; 900  : 		return (_Mybase::allocate(_Count));
; 901  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN6@allocate:

; 58   : 		return (static_cast<_Ty *>(_Ptr));
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / sizeof (_Ty) < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	76 06		 jbe	 SHORT $LN7@allocate

; 62   : 		_Xbad_alloc();	// report no memory

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN18@allocate:
$LN7@allocate:

; 63   : 	const size_t _User_size = _Count * sizeof (_Ty);

  0001b	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00023	72 2f		 jb	 SHORT $LN8@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00025	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00028	3b c8		 cmp	 ecx, eax
  0002a	77 06		 ja	 SHORT $LN10@allocate

; 73   : 			_Xbad_alloc();	// report no memory

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN19@allocate:
$LN10@allocate:

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	8b c8		 mov	 ecx, eax
  0003a	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0003d	85 c9		 test	 ecx, ecx
  0003f	75 06		 jne	 SHORT $LN11@allocate
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN20@allocate:
$LN11@allocate:

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00047	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0004a	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0004d	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 900  : 		return (_Mybase::allocate(_Count));
; 901  : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN8@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0005d	85 c0		 test	 eax, eax
  0005f	75 a9		 jne	 SHORT $LN15@allocate
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN17@allocate:
  00067	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEPAPAVSomeClass@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SomeClass *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABQAPAVSomeClass@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SomeClass *,std::allocator<SomeClass *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@QBEIXZ ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@I@Z PROC ; std::allocator<SomeClass *>::deallocate, COMDAT
; _this$dead$ = ecx

; 639  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 640  : 		_Deallocate(_Ptr, _Count);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	76 06		 jbe	 SHORT $LN4@deallocate
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN14@deallocate:
$LN4@deallocate:

; 101  : 	const size_t _User_size = _Count * sizeof (_Ty);

  00016	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00019	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001e	72 32		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00020	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00023	74 06		 je	 SHORT $LN6@deallocate
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN15@deallocate:
$LN6@deallocate:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002b	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002e	3b c1		 cmp	 eax, ecx
  00030	72 06		 jb	 SHORT $LN7@deallocate
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN16@deallocate:
$LN7@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c8		 sub	 ecx, eax
  0003a	83 f9 04	 cmp	 ecx, 4
  0003d	73 06		 jae	 SHORT $LN8@deallocate
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@deallocate:
$LN8@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00045	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00048	76 06		 jbe	 SHORT $LN9@deallocate
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN9@deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<_Ty *>(_Ptr_container);

  00050	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00058	83 c4 04	 add	 esp, 4

; 641  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN13@deallocate:
?deallocate@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@I@Z ENDP ; std::allocator<SomeClass *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAIABV?$allocator@PAVSomeClass@@@2@@Z
_TEXT	SEGMENT
?max_size@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAIABV?$allocator@PAVSomeClass@@@2@@Z PROC ; std::allocator_traits<std::allocator<SomeClass *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 787  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 788  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAIABV?$allocator@PAVSomeClass@@@2@@Z ENDP ; std::allocator_traits<std::allocator<SomeClass *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVSomeClass@@@std@@QAEPAPAVSomeClass@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVSomeClass@@@std@@QAEPAPAVSomeClass@@I@Z PROC ; std::allocator<SomeClass *>::allocate, COMDAT
; _this$dead$ = ecx

; 644  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 645  : 		return (_Allocate(_Count, (pointer)0));
; 646  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (static_cast<_Ty *>(_Ptr));
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / sizeof (_Ty) < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	76 06		 jbe	 SHORT $LN5@allocate

; 62   : 		_Xbad_alloc();	// report no memory

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 63   : 	const size_t _User_size = _Count * sizeof (_Ty);

  0001b	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00023	72 2f		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00025	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00028	3b c8		 cmp	 ecx, eax
  0002a	77 06		 ja	 SHORT $LN8@allocate

; 73   : 			_Xbad_alloc();	// report no memory

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	8b c8		 mov	 ecx, eax
  0003a	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0003d	85 c9		 test	 ecx, ecx
  0003f	75 06		 jne	 SHORT $LN9@allocate
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00047	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0004a	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0004d	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 645  : 		return (_Allocate(_Count, (pointer)0));
; 646  : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0005d	85 c0		 test	 eax, eax
  0005f	75 a9		 jne	 SHORT $LN12@allocate
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
  00067	cc		 int	 3
?allocate@?$allocator@PAVSomeClass@@@std@@QAEPAPAVSomeClass@@I@Z ENDP ; std::allocator<SomeClass *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVSomeClass@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVSomeClass@@@std@@QBEIXZ PROC	; std::allocator<SomeClass *>::max_size, COMDAT
; _this$dead$ = ecx

; 669  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 670  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVSomeClass@@@std@@QBEIXZ ENDP	; std::allocator<SomeClass *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -44						; size = 8
__Pad$ = -44						; size = 8
__Val$1$ = -36						; size = 4
$T19 = -36						; size = 1
$T13 = -32						; size = 1
__State$ = -28						; size = 4
__Count$2$ = -24					; size = 4
__Ostr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; __Ostr$ = ecx
; __Val$ = edx

; 782  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c2		 mov	 eax, edx
  0002d	89 45 dc	 mov	 DWORD PTR __Val$1$[ebp], eax
  00030	8b d1		 mov	 edx, ecx
  00032	89 55 ec	 mov	 DWORD PTR __Ostr$[ebp], edx

; 785  : 	ios_base::iostate _State = ios_base::goodbit;

  00035	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  00037	80 38 00	 cmp	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 785  : 	ios_base::iostate _State = ios_base::goodbit;

  0003a	89 7d e4	 mov	 DWORD PTR __State$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  0003d	75 04		 jne	 SHORT $LN26@operator
  0003f	33 c9		 xor	 ecx, ecx
  00041	eb 0e		 jmp	 SHORT $LN121@operator
$LN26@operator:
  00043	8b c8		 mov	 ecx, eax
  00045	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL108@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	41		 inc	 ecx
  0004b	84 c0		 test	 al, al
  0004d	75 f9		 jne	 SHORT $LL108@operator
  0004f	2b ce		 sub	 ecx, esi
$LN121@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 412  : 		return (_Wide);

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  00053	89 4d e8	 mov	 DWORD PTR __Count$2$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 412  : 		return (_Wide);

  00056	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00059	8b 5c 10 24	 mov	 ebx, DWORD PTR [eax+edx+36]
  0005d	8b 74 10 20	 mov	 esi, DWORD PTR [eax+edx+32]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 787  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  00061	85 db		 test	 ebx, ebx
  00063	7c 16		 jl	 SHORT $LN17@operator
  00065	7f 0e		 jg	 SHORT $LN110@operator
  00067	85 f6		 test	 esi, esi
  00069	74 10		 je	 SHORT $LN17@operator
  0006b	85 db		 test	 ebx, ebx
  0006d	7c 0c		 jl	 SHORT $LN17@operator
  0006f	7f 04		 jg	 SHORT $LN110@operator
  00071	3b f1		 cmp	 esi, ecx
  00073	76 06		 jbe	 SHORT $LN17@operator
$LN110@operator:
  00075	2b f1		 sub	 esi, ecx
  00077	1b df		 sbb	 ebx, edi
  00079	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
  0007e	66 0f 13 45 d4	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00083	8b 5d d8	 mov	 ebx, DWORD PTR __Pad$[ebp+4]
  00086	8b 75 d4	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 88   : 		return (_Mystrbuf);

  00089	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 99   : 			: _Myostr(_Ostr)

  0008d	89 55 d4	 mov	 DWORD PTR __Ok$[ebp], edx

; 100  : 			{	// lock the stream buffer, if there
; 101  : 			if (_Myostr.rdbuf() != 0)

  00090	85 c9		 test	 ecx, ecx
  00092	74 08		 je	 SHORT $LN39@operator

; 102  : 				_Myostr.rdbuf()->_Lock();

  00094	8b 01		 mov	 eax, DWORD PTR [ecx]
  00096	ff 50 04	 call	 DWORD PTR [eax+4]
  00099	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
$LN39@operator:

; 109  : 			}
; 110  : 
; 111  : 		_Myt& _Myostr;	// the output stream, for _Unlock call at destruction
; 112  : 
; 113  : 	private:
; 114  : 		_Sentry_base& operator=(const _Sentry_base&);
; 115  : 		};
; 116  : 
; 117  : 	class sentry
; 118  : 		: public _Sentry_base
; 119  : 		{	// stores thread lock and state of stream
; 120  : 	public:
; 121  : 		explicit __CLR_OR_THIS_CALL sentry(_Myt& _Ostr)
; 122  : 			: _Sentry_base(_Ostr)

  0009c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 308  : 		return (_Mystate);

  000a3	8b 02		 mov	 eax, DWORD PTR [edx]
  000a5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 309  : 		}
; 310  : 
; 311  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 312  : 		{	// merge in state argument, possibly reraise exception
; 313  : 		if (_State != goodbit)
; 314  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 315  : 		}
; 316  : 
; 317  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 318  : 		{	// merge in state argument
; 319  : 		if (_State != goodbit)
; 320  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 321  : 		}
; 322  : 
; 323  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 324  : 		{	// merge in state argument, old style
; 325  : 		setstate((iostate)_State);
; 326  : 		}
; 327  : 
; 328  : 	bool __CLR_OR_THIS_CALL good() const
; 329  : 		{	// test if no state bits are set
; 330  : 		return (rdstate() == goodbit);

  000a8	83 7c 10 0c 00	 cmp	 DWORD PTR [eax+edx+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  000ad	75 15		 jne	 SHORT $LN35@operator
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 76   : 		return (_Tiestr);

  000af	8b 4c 10 3c	 mov	 ecx, DWORD PTR [eax+edx+60]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  000b3	85 c9		 test	 ecx, ecx
  000b5	74 0d		 je	 SHORT $LN35@operator
  000b7	3b ca		 cmp	 ecx, edx
  000b9	74 09		 je	 SHORT $LN35@operator

; 125  : 				_Ostr.tie()->flush();

  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c1	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
$LN35@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 308  : 		return (_Mystate);

  000c4	8b 02		 mov	 eax, DWORD PTR [edx]
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 309  : 		}
; 310  : 
; 311  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 312  : 		{	// merge in state argument, possibly reraise exception
; 313  : 		if (_State != goodbit)
; 314  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 315  : 		}
; 316  : 
; 317  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 318  : 		{	// merge in state argument
; 319  : 		if (_State != goodbit)
; 320  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 321  : 		}
; 322  : 
; 323  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 324  : 		{	// merge in state argument, old style
; 325  : 		setstate((iostate)_State);
; 326  : 		}
; 327  : 
; 328  : 	bool __CLR_OR_THIS_CALL good() const
; 329  : 		{	// test if no state bits are set
; 330  : 		return (rdstate() == goodbit);

  000c9	83 7c 11 0c 00	 cmp	 DWORD PTR [ecx+edx+12], 0
  000ce	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000d1	88 45 d8	 mov	 BYTE PTR __Ok$[ebp+4], al

; 788  : 		? 0 : _Ostr.width() - _Count;
; 789  : 	const typename _Myos::sentry _Ok(_Ostr);

  000d4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 790  : 
; 791  : 	if (!_Ok)

  000db	84 c0		 test	 al, al
  000dd	75 0a		 jne	 SHORT $LN8@operator

; 792  : 		_State |= ios_base::badbit;

  000df	bf 04 00 00 00	 mov	 edi, 4

; 793  : 	else

  000e4	e9 05 01 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 794  : 		{	// state okay, insert
; 795  : 		_TRY_IO_BEGIN

  000e9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 367  : 		return (_Fmtfl);

  000ed	8b 44 11 14	 mov	 eax, DWORD PTR [ecx+edx+20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 796  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f1	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000f6	83 f8 40	 cmp	 eax, 64			; 00000040H
  000f9	74 3f		 je	 SHORT $LN105@operator
  000fb	0f 1f 44 00 00	 npad	 5
$LL4@operator:

; 797  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00100	85 db		 test	 ebx, ebx
  00102	7c 32		 jl	 SHORT $LN3@operator
  00104	7f 04		 jg	 SHORT $LN111@operator
  00106	85 f6		 test	 esi, esi
  00108	74 2c		 je	 SHORT $LN3@operator
$LN111@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 109  : 		return (_Fillch);

  0010a	8b 02		 mov	 eax, DWORD PTR [edx]
  0010c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010f	8a 44 11 40	 mov	 al, BYTE PTR [ecx+edx+64]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 798  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00113	8b 4c 11 38	 mov	 ecx, DWORD PTR [ecx+edx+56]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 109  : 		return (_Fillch);

  00117	88 45 e0	 mov	 BYTE PTR $T13[ebp], al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 798  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0011a	ff 75 e0	 push	 DWORD PTR $T13[ebp]
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z

; 802  : 					break;

  00123	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 595  : 		return (_Left == _Right);

  00126	83 f8 ff	 cmp	 eax, -1
  00129	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 798  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0012c	84 c0		 test	 al, al
  0012e	74 65		 je	 SHORT $LN2@operator

; 799  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 800  : 					{	// insertion failed, quit
; 801  : 					_State |= ios_base::badbit;

  00130	83 cf 04	 or	 edi, 4
  00133	89 7d e4	 mov	 DWORD PTR __State$[ebp], edi
$LN3@operator:

; 806  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00136	85 ff		 test	 edi, edi
  00138	75 76		 jne	 SHORT $LN6@operator
$LN105@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 88   : 		return (_Mystrbuf);

  0013a	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 806  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  0013c	6a 00		 push	 0
  0013e	ff 75 e8	 push	 DWORD PTR __Count$2$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 88   : 		return (_Mystrbuf);

  00141	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 806  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00144	ff 75 dc	 push	 DWORD PTR __Val$1$[ebp]
  00147	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00151	3b 45 e8	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00154	75 52		 jne	 SHORT $LN112@operator
  00156	85 d2		 test	 edx, edx
  00158	75 4e		 jne	 SHORT $LN112@operator
  0015a	66 0f 1f 44 00
	00		 npad	 6
$LL114@operator:

; 808  : 
; 809  : 		if (_State == ios_base::goodbit)
; 810  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00160	85 db		 test	 ebx, ebx
  00162	7c 49		 jl	 SHORT $LN118@operator
  00164	7f 04		 jg	 SHORT $LN113@operator
  00166	85 f6		 test	 esi, esi
  00168	74 43		 je	 SHORT $LN118@operator
$LN113@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 109  : 		return (_Fillch);

  0016a	8b 4d ec	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0016d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00172	03 c8		 add	 ecx, eax
  00174	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 811  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00177	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios

; 109  : 		return (_Fillch);

  0017a	88 45 dc	 mov	 BYTE PTR $T19[ebp], al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 811  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0017d	ff 75 dc	 push	 DWORD PTR $T19[ebp]
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 595  : 		return (_Left == _Right);

  00186	83 f8 ff	 cmp	 eax, -1
  00189	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 811  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0018c	84 c0		 test	 al, al
  0018e	74 10		 je	 SHORT $LN5@operator

; 812  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 813  : 					{	// insertion failed, quit
; 814  : 					_State |= ios_base::badbit;

  00190	83 cf 04	 or	 edi, 4

; 815  : 					break;

  00193	eb 18		 jmp	 SHORT $LN118@operator
$LN2@operator:

; 797  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00195	83 c6 ff	 add	 esi, -1
  00198	83 d3 ff	 adc	 ebx, -1
  0019b	e9 60 ff ff ff	 jmp	 $LL4@operator
$LN5@operator:

; 808  : 
; 809  : 		if (_State == ios_base::goodbit)
; 810  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001a0	83 c6 ff	 add	 esi, -1
  001a3	83 d3 ff	 adc	 ebx, -1
  001a6	eb b8		 jmp	 SHORT $LL114@operator
$LN112@operator:

; 807  : 			_State |= ios_base::badbit;

  001a8	bf 04 00 00 00	 mov	 edi, 4
$LN118@operator:
  001ad	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
$LN6@operator:

; 816  : 					}
; 817  : 		_Ostr.width(0);

  001b0	8b 02		 mov	 eax, DWORD PTR [edx]
  001b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase

; 418  : 		_Wide = _Newwidth;

  001b5	c7 44 10 20 00
	00 00 00	 mov	 DWORD PTR [eax+edx+32], 0
  001bd	c7 44 10 24 00
	00 00 00	 mov	 DWORD PTR [eax+edx+36], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
  001c5	eb 20		 jmp	 SHORT $LN124@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 818  : 		_CATCH_IO_(_Ostr)

  001c7	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ca	6a 01		 push	 1
  001cc	6a 04		 push	 4
  001ce	8b 02		 mov	 eax, DWORD PTR [edx]
  001d0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d3	03 ca		 add	 ecx, edx
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  001db	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001e0	c3		 ret	 0
$LN23@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
  001e1	8b 7d e4	 mov	 edi, DWORD PTR __State$[ebp]
  001e4	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
$LN124@operator:
  001e7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream

; 819  : 		}
; 820  : 
; 821  : 	_Ostr.setstate(_State);

  001ee	8b 02		 mov	 eax, DWORD PTR [edx]
  001f0	6a 00		 push	 0
  001f2	57		 push	 edi
  001f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001f6	03 ca		 add	 ecx, edx
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 127  : 			}
; 128  : 
; 129  : 		__CLR_OR_THIS_CALL ~sentry() _NOEXCEPT
; 130  : 			{	// destroy the object

  001fe	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 133  : 				this->_Myostr._Osfx();

  0020b	8b 75 d4	 mov	 esi, DWORD PTR __Ok$[ebp]
  0020e	84 c0		 test	 al, al
  00210	75 08		 jne	 SHORT $LN88@operator
  00212	8b ce		 mov	 ecx, esi
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN88@operator:

; 103  : 			}
; 104  : 
; 105  : 		__CLR_OR_THIS_CALL ~_Sentry_base() _NOEXCEPT
; 106  : 			{	// destroy after unlocking

  0021a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5

; 107  : 			if (_Myostr.rdbuf() != 0)

  0021e	8b 06		 mov	 eax, DWORD PTR [esi]
  00220	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00223	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00227	85 c9		 test	 ecx, ecx
  00229	74 05		 je	 SHORT $LN115@operator

; 108  : 				_Myostr.rdbuf()->_Unlock();

  0022b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0022d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN115@operator:

; 822  : 	return (_Ostr);

  00230	8b 45 ec	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 823  : 	}

  00233	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00236	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023d	59		 pop	 ecx
  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$8:
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_terminate
  00016	c3		 ret	 0
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9:
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_terminate
  0001d	c3		 ret	 0
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 993  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 994  : 	_Ostr.put(_Ostr.widen('\n'));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00007	6a 0a		 push	 10			; 0000000aH
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	03 ce		 add	 ecx, esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00016	0f b6 c8	 movzx	 ecx, al
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 995  : 	_Ostr.flush();

  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 996  : 	return (_Ostr);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 997  : 	}

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00@Z PROC ; std::_Move<SomeClass * *,SomeClass * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2537 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00003	2b d1		 sub	 edx, ecx
  00005	56		 push	 esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00006	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00009	c1 fa 02	 sar	 edx, 2
  0000c	57		 push	 edi
  0000d	8d 3c 95 00 00
	00 00		 lea	 edi, DWORD PTR [edx*4]
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2529 : 		_Count * sizeof (*_First));
; 2530 : 	return (_Dest + _Count);

  00020	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 2538 : 	return (_Move(_First, _Last,
; 2539 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2540 : 	}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00@Z ENDP ; std::_Move<SomeClass * *,SomeClass * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@@Z
_TEXT	SEGMENT
??$addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@@Z PROC ; std::addressof<SomeClass *>, COMDAT
; __Val$ = ecx

; 700  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00000	8b c1		 mov	 eax, ecx

; 701  : 	}

  00002	c3		 ret	 0
??$addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@@Z ENDP ; std::addressof<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@PAVSomeClass@@@std@@YA$$QAPAVSomeClass@@AAPAV1@@Z
_TEXT	SEGMENT
??$forward@PAVSomeClass@@@std@@YA$$QAPAVSomeClass@@AAPAV1@@Z PROC ; std::forward<SomeClass *>, COMDAT
; __Arg$ = ecx

; 1294 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1295 : 	}

  00002	c3		 ret	 0
??$forward@PAVSomeClass@@@std@@YA$$QAPAVSomeClass@@AAPAV1@@Z ENDP ; std::forward<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVSomeClass@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVSomeClass@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<SomeClass *> >::construct<SomeClass *,SomeClass *>, COMDAT
; _this$dead$ = ecx

; 918  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 919  : 		_Mytraits::construct(*this, _Ptr,
; 920  : 			_STD forward<_Types>(_Args)...);
; 921  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVSomeClass@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SomeClass *> >::construct<SomeClass *,SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAVSomeClass@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVSomeClass@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0ABV?$allocator@PAVSomeClass@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVSomeClass@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1><std::allocator<SomeClass *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@PAVSomeClass@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVSomeClass@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SomeClass *> >,std::_Vector_val<std::_Simple_types<SomeClass *> >,1><std::allocator<SomeClass *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SomeClass *> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVSomeClass@@@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEPAPAVSomeClass@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVSomeClass@@@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEPAPAVSomeClass@@PAPAV2@00@Z PROC ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Umove<SomeClass * *>, COMDAT
; _this$dead$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVSomeClass@@@?$vector@PAVSomeClass@@V?$allocator@PAVSomeClass@@@std@@@std@@IAEPAPAVSomeClass@@PAPAV2@00@Z ENDP ; std::vector<SomeClass *,std::allocator<SomeClass *> >::_Umove<SomeClass * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Deallocate@PAVSomeClass@@@std@@YAXPAPAVSomeClass@@I@Z
_TEXT	SEGMENT
??$_Deallocate@PAVSomeClass@@@std@@YAXPAPAVSomeClass@@I@Z PROC ; std::_Deallocate<SomeClass *>, COMDAT
; __Ptr$ = ecx
; __Count$ = edx

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

  00000	81 fa ff ff ff
	3f		 cmp	 edx, 1073741823		; 3fffffffH
  00006	76 06		 jbe	 SHORT $LN2@Deallocate
  00008	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:

; 101  : 	const size_t _User_size = _Count * sizeof (_Ty);

  0000e	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00015	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001a	72 32		 jb	 SHORT $LN3@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001c	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001f	74 06		 je	 SHORT $LN4@Deallocate
  00021	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00027	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 06		 jb	 SHORT $LN5@Deallocate
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00034	2b c8		 sub	 ecx, eax
  00036	83 f9 04	 cmp	 ecx, 4
  00039	73 06		 jae	 SHORT $LN6@Deallocate
  0003b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00041	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00044	76 06		 jbe	 SHORT $LN7@Deallocate
  00046	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<_Ty *>(_Ptr_container);

  0004c	8b c8		 mov	 ecx, eax
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00054	59		 pop	 ecx

; 139  : 	}

  00055	c3		 ret	 0
??$_Deallocate@PAVSomeClass@@@std@@YAXPAPAVSomeClass@@I@Z ENDP ; std::_Deallocate<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVSomeClass@@@std@@YAPAPAVSomeClass@@IPAPAV1@_N@Z
_TEXT	SEGMENT
__Try_aligned_allocation$dead$ = 8			; size = 1
??$_Allocate@PAVSomeClass@@@std@@YAPAPAVSomeClass@@IPAPAV1@_N@Z PROC ; std::_Allocate<SomeClass *>, COMDAT
; __Count$ = ecx
; ___formal$dead$ = edx

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00000	85 c9		 test	 ecx, ecx
  00002	75 03		 jne	 SHORT $LN2@Allocate

; 58   : 		return (static_cast<_Ty *>(_Ptr));

  00004	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 91   : 		}
; 92   : 	return (static_cast<_Ty *>(_Ptr));
; 93   : 	}

  00006	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / sizeof (_Ty) < _Count)

  00007	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0000d	76 06		 jbe	 SHORT $LN3@Allocate

; 62   : 		_Xbad_alloc();	// report no memory

  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:

; 63   : 	const size_t _User_size = _Count * sizeof (_Ty);

  00015	c1 e1 02	 shl	 ecx, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 2c		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00023	3b c1		 cmp	 eax, ecx
  00025	77 06		 ja	 SHORT $LN6@Allocate

; 73   : 			_Xbad_alloc();	// report no memory

  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	8b c8		 mov	 ecx, eax
  00035	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00038	85 c9		 test	 ecx, ecx
  0003a	75 06		 jne	 SHORT $LN7@Allocate
  0003c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00042	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00045	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00048	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (static_cast<_Ty *>(_Ptr));
; 93   : 	}

  0004b	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00052	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00055	85 c0		 test	 eax, eax
  00057	75 ad		 jne	 SHORT $LN1@Allocate
  00059	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate@PAVSomeClass@@@std@@YAPAPAVSomeClass@@IPAPAV1@_N@Z ENDP ; std::_Allocate<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SomeClass *> >::_Vector_val<std::_Simple_types<SomeClass *> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVSomeClass@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SomeClass *> >::_Vector_val<std::_Simple_types<SomeClass *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z
_TEXT	SEGMENT
__Right$dead$ = 8					; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<SomeClass *> >::_Wrap_alloc<std::allocator<SomeClass *> >, COMDAT
; _this$ = ecx

; 860  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@QAE@ABV?$allocator@PAVSomeClass@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<SomeClass *> >::_Wrap_alloc<std::allocator<SomeClass *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVSomeClass@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??0?$allocator@PAVSomeClass@@@std@@QAE@ABV01@@Z PROC	; std::allocator<SomeClass *>::allocator<SomeClass *>, COMDAT
; _this$ = ecx

; 624  : 		{	// construct by copying (do nothing)
; 625  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@PAVSomeClass@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<SomeClass *>::allocator<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVSomeClass@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVSomeClass@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@PAVSomeClass@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVSomeClass@@0@Z PROC ; std::_Ptr_cat<SomeClass *,SomeClass *>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVSomeClass@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVSomeClass@@0@Z ENDP ; std::_Ptr_cat<SomeClass *,SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<SomeClass * *,SomeClass * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2526 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00003	2b d1		 sub	 edx, ecx
  00005	56		 push	 esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00006	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00009	c1 fa 02	 sar	 edx, 2
  0000c	57		 push	 edi
  0000d	8d 3c 95 00 00
	00 00		 lea	 edi, DWORD PTR [edx*4]
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2529 : 		_Count * sizeof (*_First));
; 2530 : 	return (_Dest + _Count);

  00020	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 2531 : 	}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Move@PAPAVSomeClass@@PAPAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<SomeClass * *,SomeClass * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<SomeClass *>, COMDAT
; __Val$ = ecx

; 692  : 	return (reinterpret_cast<_Ty *>(

  00000	8b c1		 mov	 eax, ecx

; 693  : 		&const_cast<char&>(
; 694  : 		reinterpret_cast<const volatile char&>(_Val))));
; 695  : 	}

  00002	c3		 ret	 0
??$_Addressof@PAVSomeClass@@@std@@YAPAPAVSomeClass@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVSomeClass@@PAV1@@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAXAAV?$allocator@PAVSomeClass@@@1@PAPAVSomeClass@@$$QAPAV3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAVSomeClass@@PAV1@@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAXAAV?$allocator@PAVSomeClass@@@1@PAPAVSomeClass@@$$QAPAV3@@Z PROC ; std::allocator_traits<std::allocator<SomeClass *> >::construct<SomeClass *,SomeClass *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 774  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	85 d2		 test	 edx, edx
  00005	74 07		 je	 SHORT $LN8@construct
  00007	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 02		 mov	 DWORD PTR [edx], eax
$LN8@construct:

; 775  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 776  : 		}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$construct@PAVSomeClass@@PAV1@@?$allocator_traits@V?$allocator@PAVSomeClass@@@std@@@std@@SAXAAV?$allocator@PAVSomeClass@@@1@PAPAVSomeClass@@$$QAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<SomeClass *> >::construct<SomeClass *,SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAVSomeClass@@@std@@@std@@YAABV?$allocator@PAVSomeClass@@@0@ABV10@@Z
_TEXT	SEGMENT
??$forward@ABV?$allocator@PAVSomeClass@@@std@@@std@@YAABV?$allocator@PAVSomeClass@@@0@ABV10@@Z PROC ; std::forward<std::allocator<SomeClass *> const &>, COMDAT
; __Arg$ = ecx

; 1294 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1295 : 	}

  00002	c3		 ret	 0
??$forward@ABV?$allocator@PAVSomeClass@@@std@@@std@@YAABV?$allocator@PAVSomeClass@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<SomeClass *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SomeClass *> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 180  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAXPAPAVSomeClass@@0AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z PROC ; std::_Uninitialized_move<SomeClass * *,SomeClass * *,std::_Wrap_alloc<std::allocator<SomeClass *> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	2b d1		 sub	 edx, ecx
  00005	c1 fa 02	 sar	 edx, 2
  00008	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00009	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  00010	56		 push	 esi
  00011	51		 push	 ecx
  00012	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	03 c6		 add	 eax, esi
  00020	5e		 pop	 esi

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$_Uninitialized_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<SomeClass * *,SomeClass * *,std::_Wrap_alloc<std::allocator<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVSomeClass@@PAV1@@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVSomeClass@@PAV1@@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z PROC ; std::allocator<SomeClass *>::construct<SomeClass *,SomeClass *>, COMDAT
; _this$dead$ = ecx

; 656  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 658  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVSomeClass@@PAV1@@?$allocator@PAVSomeClass@@@std@@QAEXPAPAVSomeClass@@$$QAPAV2@@Z ENDP ; std::allocator<SomeClass *>::construct<SomeClass *,SomeClass *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z
_TEXT	SEGMENT
??$_Unchecked@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z PROC ; std::_Unchecked<SomeClass * *>, COMDAT
; __Src$ = ecx

; 439  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 440  : 	}

  00002	c3		 ret	 0
??$_Unchecked@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z ENDP ; std::_Unchecked<SomeClass * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninit_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z PROC ; std::_Uninit_move<SomeClass * *,SomeClass * *,std::_Wrap_alloc<std::allocator<SomeClass *> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	2b d1		 sub	 edx, ecx
  00005	c1 fa 02	 sar	 edx, 2
  00008	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00009	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  00010	56		 push	 esi
  00011	51		 push	 ecx
  00012	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	03 c6		 add	 eax, esi
  00020	5e		 pop	 esi

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$_Uninit_move@PAPAVSomeClass@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@std@@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@@Z ENDP ; std::_Uninit_move<SomeClass * *,SomeClass * *,std::_Wrap_alloc<std::allocator<SomeClass *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVSomeClass@@PAPAV1@@std@@YAAAPAPAVSomeClass@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
??$_Rechecked@PAPAVSomeClass@@PAPAV1@@std@@YAAAPAPAVSomeClass@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<SomeClass * *,SomeClass * *>, COMDAT
; __Dest$ = ecx
; __Src$ = edx

; 447  : 	_Dest = _Src;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 448  : 	return (_Dest);

  00002	8b c1		 mov	 eax, ecx

; 449  : 	}

  00004	c3		 ret	 0
??$_Rechecked@PAPAVSomeClass@@PAPAV1@@std@@YAAAPAPAVSomeClass@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<SomeClass * *,SomeClass * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z
_TEXT	SEGMENT
??$_Val_type@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z PROC ; std::_Val_type<SomeClass * *>, COMDAT
; ___formal$dead$ = ecx

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVSomeClass@@@std@@YAPAPAVSomeClass@@PAPAV1@@Z ENDP ; std::_Val_type<SomeClass * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVSomeClass@@PAV1@PAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$dead$ = 16					; size = 4
___formal$ = 20						; size = 1
??$_Uninit_move@PAVSomeClass@@PAV1@PAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<SomeClass *,SomeClass *,SomeClass *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	2b d1		 sub	 edx, ecx
  00005	c1 fa 02	 sar	 edx, 2
  00008	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00009	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  00010	56		 push	 esi
  00011	51		 push	 ecx
  00012	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	03 c6		 add	 eax, esi
  00020	5e		 pop	 esi

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$_Uninit_move@PAVSomeClass@@PAV1@PAV1@@std@@YAPAPAVSomeClass@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVSomeClass@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<SomeClass *,SomeClass *,SomeClass *>
_TEXT	ENDS
END
